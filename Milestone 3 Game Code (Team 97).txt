package game.gui;

import game.engine.Battle;
import game.engine.exceptions.InsufficientResourcesException;
import game.engine.exceptions.InvalidLaneException;
import game.engine.lanes.Lane;
import game.engine.titans.AbnormalTitan;
import game.engine.titans.ArmoredTitan;
import game.engine.titans.ColossalTitan;
import game.engine.titans.PureTitan;
import game.engine.titans.Titan;
import game.engine.weapons.PiercingCannon;
import game.engine.weapons.SniperCannon;
import game.engine.weapons.VolleySpreadCannon;
import game.engine.weapons.Weapon;

import java.io.IOException;
import java.util.ArrayList;
import java.util.PriorityQueue;

import javafx.application.Application;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
//import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Main extends Application {
	private static final int SCENE_WIDTH = 1530;
	private static final int SCENE_HEIGHT = 800;
	Stage tempStage;
	BorderPane root1 = new BorderPane();
	Scene scene1 = new Scene(root1, SCENE_WIDTH, SCENE_HEIGHT);
	BorderPane root2 = new BorderPane();
	Scene scene2 = new Scene(root2, SCENE_WIDTH, SCENE_HEIGHT);
	VBox root3 = new VBox();
	Scene scene3 = new Scene(root3, SCENE_WIDTH, SCENE_HEIGHT);
	GridPane root4 = new GridPane();
	Scene scene4 = new Scene(root4, SCENE_WIDTH, SCENE_HEIGHT);
	GridPane root5 = new GridPane();
	Scene scene5 = new Scene(root5, SCENE_WIDTH, SCENE_HEIGHT);
	BorderPane root6 = new BorderPane();
	Scene scene6 = new Scene(root6, SCENE_WIDTH, SCENE_HEIGHT);
	Battle b;
	Text scoreText;
	Text numberOfTurns;
	Text battlePhase;
	Text resourcesGained;
	boolean easygame = false;
	boolean hardgame = false;
	Button purchase;
	Button pass;
	Button exit = new Button("X");
	Button BuyWeaponOneButton = new Button(
			"Name: Anti-Titan Shell,\n price: 25,\n type: Piercing Cannon,\n damage: 10");
	Button BuyWeaponTwoButton = new Button("Name: Long Range Spear,\n price: 25,\n type: Sniper Cannon,\n damage: 10");
	Button BuyWeaponThreeButton = new Button(
			"Name: Wall Spread Cannon,\n price: 100,\n type: Volley Spread Cannon,\n damage: 5");
	Button BuyWeaponFourButton = new Button("Name: Proximity Trap,\n price: 75,\n type: Wall Trap,\n damage: 100");
	Button NewTurn = new Button("NEW TURN");

	@Override
	public void start(Stage primaryStage) throws Exception {
		Text homeTitle = new Text("Attack on Titans");
		homeTitle.setFill(Color.RED);
		homeTitle.setFont(new Font("Times New Roman", 80));
		root1.setMargin(homeTitle, new Insets(180));
		root1.setAlignment(homeTitle, Pos.TOP_CENTER);
		root1.setTop(homeTitle);
		Button button1 = new Button("Play");
		button1.setPrefSize(170, 60);
		button1.setPadding(new Insets(10));
		button1.setFont(new Font("Times New Roman", 30));
		root1.setMargin(button1, new Insets(100));
		root1.setAlignment(button1, Pos.BASELINE_CENTER);
		root1.setCenter(button1);
		root1.setStyle("-fx-background-image: url('file:///C:/Users/hrefa/Downloads/image.jpg');" +
                "-fx-background-size: cover;");
		root2.setStyle("-fx-background-image: url('file:///C:/Users/hrefa/Downloads/image.jpg');" +
                "-fx-background-size: cover;");
		root3.setStyle("-fx-background-image: url('file:///C:/Users/hrefa/Downloads/image.jpg');" +
                "-fx-background-size: cover;");
		root4.setStyle("-fx-background-image: url('file:///C:/Users/hrefa/Downloads/image.jpg');" +
                "-fx-background-size: cover;");
		root5.setStyle("-fx-background-image: url('file:///C:/Users/hrefa/Downloads/image.jpg');" +
                "-fx-background-size: cover;");
		tempStage = primaryStage;
		tempStage.setTitle("Attack on Titans");
		tempStage.setScene(scene1);
		button1.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				displayInstructions();
				tempStage.setScene(scene2);
			}
		});
		tempStage.show();
	}

	public void displayInstructions() {
		Text text = new Text("Instructions: ");
		Text instr = new Text(
				"\n \nThis game takes place in an imaginary scenario where the titans breached their way throughout Wall Maria and reached the \nnorthern border of Wall Rose at the Utopia District."
						+ "The human forces stationed in Utopia engage the titans in battle for one \nlast hope of preventing the titans from breaching Wall Rose. The humans fight by deploying different types of Anti-Titan\n weapons in order to stop the Titan’s onslaught and keep Utopia’s (and Wall Rose’s) walls safe. So you have to protect \nthe walls and prevent them from being destroyed by the titans. There are 2 modes for the game either easy or hard.\n \nSo press OK to choose a mode and start the game.");
		text.setFont(new Font("Times New Roman", 60));
		text.setFill(Color.BLUE);
		instr.setFont(new Font("Times New Roman", 30));
		instr.setFill(Color.AQUA);
		Button button2 = new Button("OK");
		button2.setPrefSize(110, 20);
		button2.setPadding(new Insets(5));
		button2.setFont(new Font("Times New Roman", 30));
		root2.setTop(text);
		root2.setCenter(instr);
		root2.setAlignment(instr, Pos.BASELINE_LEFT);
		root1.setMargin(button2, new Insets(40));
		root1.setAlignment(button2, Pos.BOTTOM_RIGHT);
		root2.setBottom(button2);
		button2.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				chooseMode();
				tempStage.setScene(scene3);
			}
		});
	}

	public void chooseMode() {
		Text text = new Text("Choose a game mode:");
		text.setFont(new Font("Times New Roman", 40));
		text.setFill(Color.BLUE);
		Button easy = new Button("easy");
		easy.setPrefSize(110, 20);
		easy.setPadding(new Insets(5));
		;
		easy.setFont(new Font("Times New Roman", 30));
		Button hard = new Button("hard");
		hard.setPrefSize(110, 20);
		hard.setPadding(new Insets(5));
		;
		hard.setFont(new Font("Times New Roman", 30));
		root3.setMargin(easy, new Insets(40));
		easy.setAlignment(Pos.CENTER);
		root3.setMargin(hard, new Insets(40));
		hard.setAlignment(Pos.CENTER);
// easy.setAlignment(Pos.CENTER_LEFT);
// hard.setAlignment(Pos.CENTER_RIGHT);
		root3.getChildren().addAll(text, easy, hard);
		easy.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				easygame = true;
				easyGame();
				toCreateScene4();
				tempStage.setScene(scene4);
// tempStage.setFullScreen(true);
			}
		});
		hard.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				hardgame = true;
				hardGame();
				toCreateScene4();
				tempStage.setScene(scene4);
			}
		});
	}

	public void easyGame() {
		try {
			b = new Battle(1, 0, 100, 3, 250);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void toCreateScene4() {
		root4.add(exit, 0, 0);
		exit.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				try {
					root1.getChildren().clear();
					root2.getChildren().clear();
					root3.getChildren().clear();
					root4.getChildren().clear();
					root5.getChildren().clear();
					start(tempStage);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		pass = new Button("Pass Turn");
		purchase = new Button("Purchase Weapon");
		root4.addRow(6, pass);
		root4.addRow(7, purchase);
		ArrayList<Lane> tempLanes = new ArrayList();
		tempLanes.addAll(b.getOriginalLanes());
		int i;
		Rectangle rectangle = new Rectangle();
		Text text = new Text("");
		for (i = 0; i < tempLanes.size(); i++) {
			rectangle = new Rectangle(200, 100);
			rectangle.setFill(Color.LIGHTBLUE);
			Lane tempLane = tempLanes.get(i);
			text = new Text("Current Health: " + tempLane.getLaneWall().getCurrentHealth() + "\n" + "Danger Level: "
					+ tempLane.getDangerLevel());
			String currentText = text.getText() + "\n" + "Weapons bought: ";
// uncomment to test lane 1 lost
// if (i == 0) {
// tempLane.getLaneWall().setCurrentHealth(-1);
// }
			if (tempLane.isLaneLost()) {
				rectangle.setFill(Color.RED);
				text.setText("Lane Lost");
			} else {
				for (int j = 0; j < tempLane.getWeapons().size(); j++) {
					Weapon tempWeapon = tempLane.getWeapons().get(j);
					if (tempWeapon instanceof PiercingCannon) {
						currentText += "Piercing Cannon \n";
						text.setText(currentText);
					} else if (tempWeapon instanceof SniperCannon) {
						currentText += "Sniper Cannon \n";
						text.setText(currentText);
					} else if (tempWeapon instanceof VolleySpreadCannon) {
						currentText += "VolleySpread Cannon \n";
						text.setText(currentText);
					} else {
						currentText += "Wall Trap \n";
						text.setText(currentText);
					}
				}
			}
			text.setFont(Font.font(12));
			StackPane pane = new StackPane();
			pane.getChildren().addAll(rectangle, text);
			root4.add(pane, 0, i + 1);
		}
		updateChanges();
		root4.addRow(8, scoreText, numberOfTurns, battlePhase, resourcesGained);
		root4.addRow(9, BuyWeaponOneButton, BuyWeaponTwoButton, BuyWeaponThreeButton, BuyWeaponFourButton);
		BuyWeaponOneButton.setDisable(true);
		BuyWeaponTwoButton.setDisable(true);
		BuyWeaponThreeButton.setDisable(true);
		BuyWeaponFourButton.setDisable(true);
		tempStage.setScene(scene4);
		pass.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				b.passTurn();
				pass.setVisible(false);
				purchase.setVisible(false);
				LanesInfo();
				TitansInfo();
				root5.addRow(13, NewTurn);
// if(b.isGameOver())
// lose();
				NewTurn.setOnMouseClicked(new EventHandler<Event>() {
					@Override
					public void handle(Event event) {
						if (b.isGameOver()) {
							lose();
							root1.getChildren().clear();
							root2.getChildren().clear();
							root3.getChildren().clear();
							root4.getChildren().clear();
							root5.getChildren().clear();
							try {
								start(tempStage);
							} catch (Exception e) {
// TODO Auto-generated catch block
								e.printStackTrace();
							}
						} else
							UpdateTurns();
					}
				});
				tempStage.setScene(scene5);
// tempStage.setFullScreen(true);
			}
		});
		purchase.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				if (easygame)
					lanePurchaseEasy();
				else
					lanePurchaseHard();
				pass.setVisible(false);
				purchase.setVisible(false);
				NewTurn.setOnMouseClicked(new EventHandler<Event>() {
					@Override
					public void handle(Event event) {
						if (b.isGameOver()) {
							lose();
							root1.getChildren().clear();
							root2.getChildren().clear();
							root3.getChildren().clear();
							root4.getChildren().clear();
							root5.getChildren().clear();
							try {
								start(tempStage);
							} catch (Exception e) {
// TODO Auto-generated catch block
								e.printStackTrace();
							}
						} else
							UpdateTurns();
					}
				});
			}
		});
	}

	public void hardGame() {
		try {
			b = new Battle(1, 0, 100, 5, 125);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void lanePurchaseEasy() {
		Button lane1 = new Button("Lane 1");
		Button lane2 = new Button("Lane 2");
		Button lane3 = new Button("Lane 3");
		root4.addRow(11, lane1, lane2, lane3);
		lane1.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(0));
			}
		});
		lane2.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(1));
			}
		});
		lane3.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(2));
			}
		});
	}

	public void lanePurchaseHard() {
		Button lane1 = new Button("Lane 1");
		Button lane2 = new Button("Lane 2");
		Button lane3 = new Button("Lane 3");
		Button lane4 = new Button("Lane 4");
		Button lane5 = new Button("Lane 5");
		root4.addRow(20, lane1, lane2, lane3, lane4, lane5);
		lane1.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				lane4.setVisible(false);
				lane5.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(0));
			}
		});
		lane2.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				lane4.setVisible(false);
				lane5.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(1));
			}
		});
		lane3.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				lane4.setVisible(false);
				lane5.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(2));
			}
		});
		lane4.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				lane4.setVisible(false);
				lane5.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(3));
			}
		});
		lane5.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				lane1.setVisible(false);
				lane2.setVisible(false);
				lane3.setVisible(false);
				lane4.setVisible(false);
				lane5.setVisible(false);
				weaponPurchase(b.getOriginalLanes().get(4));
			}
		});
	}

	public void weaponPurchase(Lane lane) {
		BuyWeaponOneButton.setDisable(false);
		BuyWeaponTwoButton.setDisable(false);
		BuyWeaponThreeButton.setDisable(false);
		BuyWeaponFourButton.setDisable(false);
		BuyWeaponOneButton.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				try {
					b.purchaseWeapon(1, lane);
					LanesInfo();
					TitansInfo();
					root5.addRow(13, NewTurn);
					NewTurn.setOnMouseClicked(new EventHandler<Event>() {
						@Override
						public void handle(Event event) {
							UpdateTurns();
						}
					});
					tempStage.setScene(scene5);
// tempStage.setFullScreen(true);
				} catch (InsufficientResourcesException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("you do not have enough resources to purchase the weapon");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				} catch (InvalidLaneException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("Weapons cannot be added to lost lanes");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				}
			}
		});
		BuyWeaponTwoButton.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				try {
					b.purchaseWeapon(2, lane);
					LanesInfo();
					TitansInfo();
					root5.addRow(13, NewTurn);
					NewTurn.setOnMouseClicked(new EventHandler<Event>() {
						@Override
						public void handle(Event event) {
							UpdateTurns();
						}
					});
					tempStage.setScene(scene5);
// tempStage.setFullScreen(true);
				} catch (InsufficientResourcesException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("you do not have enough resources to purchase the weapon");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				} catch (InvalidLaneException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("Weapons cannot be added to lost lanes");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				}
			}
		});
		BuyWeaponThreeButton.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				try {
					b.purchaseWeapon(3, lane);
					LanesInfo();
					TitansInfo();
					root5.addRow(13, NewTurn);
					NewTurn.setOnMouseClicked(new EventHandler<Event>() {
						@Override
						public void handle(Event event) {
							UpdateTurns();
						}
					});
					tempStage.setScene(scene5);
// tempStage.setFullScreen(true);
				} catch (InsufficientResourcesException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("you do not have enough resources to purchase the weapon");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				} catch (InvalidLaneException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("Weapons cannot be added to lost lanes");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				}
			}
		});
		BuyWeaponFourButton.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				try {
					b.purchaseWeapon(4, lane);
					LanesInfo();
					TitansInfo();
					root5.addRow(13, NewTurn);
					NewTurn.setOnMouseClicked(new EventHandler<Event>() {
						@Override
						public void handle(Event event) {
							UpdateTurns();
						}
					});
					tempStage.setScene(scene5);
// tempStage.setFullScreen(true);
				} catch (InsufficientResourcesException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("you do not have enough resources to purchase the weapon");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				} catch (InvalidLaneException e) {
					Alert a = new Alert(Alert.AlertType.WARNING);
					a.setContentText("Weapons cannot be added to lost lanes");
					a.showAndWait();
					root4.getChildren().clear();
					root5.getChildren().clear();
					toCreateScene4();
				}
			}
		});
	}

	public void LanesInfo() {
		root5.add(exit, 0, 0);
		exit.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				try {
					root1.getChildren().clear();
					root2.getChildren().clear();
					root3.getChildren().clear();
					root4.getChildren().clear();
					root5.getChildren().clear();
					start(tempStage);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		root5.addRow(9, BuyWeaponOneButton, BuyWeaponTwoButton, BuyWeaponThreeButton, BuyWeaponFourButton);
		BuyWeaponOneButton.setDisable(true);
		BuyWeaponTwoButton.setDisable(true);
		BuyWeaponThreeButton.setDisable(true);
		BuyWeaponFourButton.setDisable(true);
		int c;
		if (easygame)
			c = 4;
		else
			c = 6;
		for (int i = 1; i < c; i++) {
			Text wall = new Text("Wall");
			wall.setFont(new Font("Times New Roman", 25));
			wall.setFill(Color.CYAN);
			wall.setY(5);
			root5.add(wall, 1, i);
		}
		ArrayList<Lane> tempLanes = new ArrayList();
		tempLanes.addAll(b.getOriginalLanes());
		updateChanges();
		root5.addRow(8, scoreText, numberOfTurns, battlePhase, resourcesGained);
		int i;
		Rectangle rectangle = new Rectangle();
		Text text = new Text("");
// text.setStyle("-fx-text-fill:#00008B;");
		for (i = 0; i < tempLanes.size(); i++) {
			rectangle = new Rectangle(200, 100);
			rectangle.setFill(Color.LIGHTBLUE);
			Lane tempLane = tempLanes.get(i);
			text = new Text("                   Current Health: " + 1000 + "\n"
					+ "                   Danger Level: " + tempLane.getDangerLevel());
			String currentText = text.getText() + "\n" + "                   Weapons bought: ";
// uncomment to test lane 1 lost
// if (i == 0) {
// tempLane.getLaneWall().setCurrentHealth(-1);
// }
// tempLanes.get(i).getLaneWall().setCurrentHealth(-1);
			if (tempLane.isLaneLost()) {
				rectangle.setFill(Color.RED);
				text.setText("Lane Lost");
			} else {
				for (int j = 0; j < tempLane.getWeapons().size(); j++) {
					Weapon tempWeapon = tempLane.getWeapons().get(j);
					if (tempWeapon instanceof PiercingCannon) {
						currentText += "Piercing Cannon \n";
						text.setText(currentText);
					} else if (tempWeapon instanceof SniperCannon) {
						currentText += "Sniper Cannon \n";
						text.setText(currentText);
					} else if (tempWeapon instanceof VolleySpreadCannon) {
						currentText += "VolleySpread Cannon \n";
						text.setText(currentText);
					} else {
						currentText += "Wall Trap \n";
						text.setText(currentText);
					}
				}
			}
			text.setFont(Font.font(12));
			StackPane pane = new StackPane();
			pane.getChildren().addAll(rectangle, text);
			root5.add(pane, 0, i + 1);
		}
	}

	public void updateChanges() {
		scoreText = new Text("Score is: " + b.getScore());
		scoreText.setFill(Color.WHITE);
		numberOfTurns = new Text(" Number of turns is: " + b.getNumberOfTurns());
		numberOfTurns.setFill(Color.WHITE);
		battlePhase = new Text(" Battle phase is: " + b.getBattlePhase());
		battlePhase.setFill(Color.WHITE);
		resourcesGained = new Text(" Resources: " + b.getResourcesGathered());
		resourcesGained.setFill(Color.WHITE);
// if(b.isGameOver())
// lose();
	}

	public void TitansInfo() {
		ArrayList<Lane> allLanes = new ArrayList();
		allLanes.addAll(b.getOriginalLanes());
		PriorityQueue<Titan> allTitansInALane = new PriorityQueue<Titan>();
		String health = "current health: ";
		int i;
		for (i = 0; i < allLanes.size(); i++) {
			allTitansInALane.addAll(allLanes.get(i).getTitans());
// Text titansHealth=new Text("current health: ");
			while (!allTitansInALane.isEmpty() && !allLanes.get(i).isLaneLost()) {
// final int tempCol = col;
// final int tempRow = i;
				Circle titan = new Circle();
				titan.setCenterX(20);
				titan.setCenterY(20);
				titan.setRadius(30);
				if (allTitansInALane.peek() instanceof PureTitan)
					titan.setFill(Color.RED);
				if (allTitansInALane.peek() instanceof ColossalTitan)
					titan.setFill(Color.YELLOW);
				if (allTitansInALane.peek() instanceof AbnormalTitan)
					titan.setFill(Color.GREEN);
				if (allTitansInALane.peek() instanceof ArmoredTitan)
					titan.setFill(Color.BROWN);
				Text health1 = new Text(health + allTitansInALane.peek().getCurrentHealth() + "\n" + " distance: "
						+ allTitansInALane.peek().getDistance() + "\n" + "height: "
						+ allTitansInALane.peek().getHeightInMeters() + "\n" + "speed: "
						+ allTitansInALane.peek().getSpeed());
				StackPane pane2 = new StackPane();
				pane2.getChildren().addAll(titan, health1);
				root5.add(pane2, allTitansInALane.peek().getDistance() / 10, i + 1);
				allTitansInALane.remove();
			}
		}
	}

	public void UpdateTurns() {
		root4.getChildren().clear();
		root5.getChildren().clear();
		toCreateScene4();
	}

	public void lose() {
		
		Alert a = new Alert(Alert.AlertType.INFORMATION);
		a.setContentText("Game Over \n you lost \n score is " + b.getScore());
		a.showAndWait();
		/*
		 * Text lose = new Text("Game Over \n you lost \n score is " + b.getScore());
		 * root6.getChildren().addAll(lose); tempStage.setScene(scene6);
		 * root1.getChildren().clear(); root2.getChildren().clear();
		 * root3.getChildren().clear(); root4.getChildren().clear();
		 * root5.getChildren().clear();
		 */
		/*
		 * try { start(tempStage); } catch (Exception e) { e.printStackTrace(); }
		 */
	}

	public static void main(String[] args) {
		launch(args);
	}
}
